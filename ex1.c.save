//Write a C program to perform to perform frame sort
//- each frame contains sequence number time and message
//- sequence number must be a random number of two digits, generate the repeated sequence number
//- sort the frames based on sequence numbers using bubble sort techniques
//- display all the information of the packet before sort and after sorting

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_FRAMES 100

struct Frame {
    int sequenceNumber;
    int time;
    char message[100];
};

int generateRandomNumber() {
    return rand() % 100;
}

void swap(struct Frame *a, struct Frame *b) {
    struct Frame temp = *a;
    *a = *b;
    *b = temp;
}

void bubbleSort(struct Frame frames[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (frames[j].sequenceNumber > frames[j + 1].sequenceNumber) {
                swap(&frames[j], &frames[j + 1]);
            }
        }
    }
}

void displayFrames(struct Frame frames[], int n, const char *title) {
    printf("%s:\n", title);
    printf("Sequence Number\t\tTime\t\tMessage\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t\t%d\t\t%s\n", frames[i].sequenceNumber, frames[i].time, frames[i].message);
    }
    printf("\n");
}

int main() {
    //srand(time(NULL));

    struct Frame frames[MAX_FRAMES];

    for (int i = 0; i < MAX_FRAMES; i++) {
        frames[i].sequenceNumber = generateRandomNumber();
        frames[i].time = generateRandomNumber();
        sprintf(frames[i].message, "Message %d", i + 1);
    }

    displayFrames(frames, MAX_FRAMES, "Frames Before Sorting");

    bubbleSort(frames, MAX_FRAMES);

    displayFrames(frames, MAX_FRAMES, "Frames After Sorting");

    return 0;
}
